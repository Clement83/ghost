#include <SPI.h>
#include <Gamebuino.h>
Gamebuino gb;

const byte Aiguille[] PROGMEM = {8,30,0x30,0x78,0xFC,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,};
const byte Screen[] PROGMEM = {88,48,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xFF,0xC0,0x0,0x0,0x0,0x0,0x0,0xFF,0x0,0x0,0x7,0xC1,0xF0,0x0,0x0,0x0,0x0,0x7,0xC7,0xC0,0x0,0xF,0x0,0x78,0x0,0x0,0x0,0x0,0xC,0x0,0xE0,0x0,0x1C,0x0,0x1C,0x0,0x0,0x0,0x0,0x1E,0x0,0x30,0x0,0x1C,0x0,0x1C,0x0,0x0,0x0,0x0,0x24,0x18,0x18,0x0,0x38,0x21,0xE,0x0,0x0,0x0,0x0,0x67,0x70,0xC,0x0,0x38,0x21,0xE,0x0,0x0,0x0,0x0,0xC7,0xC0,0x6,0x0,0x38,0x0,0xE,0x0,0x0,0x0,0x7,0x84,0xC0,0x2,0x0,0x38,0x40,0x8E,0x0,0x0,0x0,0x5,0x80,0x0,0x3,0x0,0x3C,0x3F,0x1E,0x0,0x0,0x0,0x5,0x80,0x70,0x7D,0x0,0x1E,0x0,0x3C,0x0,0x0,0x0,0x7,0xB3,0xF0,0xCD,0x0,0x1F,0x0,0x7C,0x0,0x0,0x0,0x3,0x3F,0xB1,0x9,0x0,0xF,0xE3,0xF8,0x0,0x0,0x0,0x1,0x3F,0xB0,0x19,0x80,0x7,0xFF,0xF0,0x0,0x0,0x0,0x1,0xBF,0xF0,0x31,0x80,0x1,0xFF,0xE0,0x0,0x0,0x0,0x1,0xB8,0x70,0x21,0x80,0x4,0x7F,0x0,0x0,0x0,0x0,0x1,0x90,0x30,0x1,0x0,0x3F,0x94,0xFE,0x0,0x0,0x0,0x0,0x90,0x30,0x1,0x0,0x70,0xD5,0x87,0x0,0x0,0x0,0x0,0x90,0x20,0x1,0x0,0x30,0x77,0x6,0x0,0x0,0x0,0x0,0xC8,0x20,0x1,0x0,0x30,0xF7,0x86,0x0,0x0,0x0,0x0,0x48,0x60,0x1,0xE0,0x18,0x77,0xE,0x0,0x0,0x0,0x0,0x64,0x40,0x0,0x60,0x1E,0xF7,0xBC,0x0,0x0,0x0,0x0,0x33,0xC0,0x0,0xC0,0x7,0xFF,0xF0,0x0,0x7F,0xFF,0xF0,0x19,0x80,0x1,0x80,0x0,0x1C,0x0,0x7,0xFF,0xFF,0xFF,0xC,0x0,0x6,0x0,0x0,0x0,0x0,0x7F,0x80,0x60,0x1F,0xE7,0x80,0x78,0x0,0x0,0x0,0x1,0xF8,0x0,0x60,0x1,0xFF,0xFF,0xE0,0x0,0x0,0x0,0x7,0xC0,0x0,0x60,0x0,0x3F,0x0,0x0,0x0,0x0,0x0,0x1E,0x0,0x0,0x0,0x0,0x7,0xC0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x1,0xE0,0x0,0x0,0x0,0x1,0xE0,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x3,0x80,0x0,0x0,0x0,0x0,0x0,0x3C,0x0,0x0,0x0,0x7,0xC0,0x0,0x0,0x0,0x0,0x0,0x6F,0x0,0x0,0x0,0x1E,0x60,0x0,0x0,0x0,0x0,0x0,0xC3,0x80,0x0,0x0,0x38,0x20,0x0,0x0,0x0,0x0,0x0,0x81,0xC0,0x0,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xE0,0x0,0x0,0xE0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x0,0x1,0xC0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1C,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0xC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x80,0x1E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x80,0x1B,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xD,0xC0,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0xC0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC0,};


int input, prevInput, inputVar;
float angle,angleCible;
unsigned int cptFrame;
void setup(){
  gb.begin();
  gb.titleScreen(F("Ghost detector"));
  gb.setFrameRate(100);
}
bool mode = true;
void loop(){
  if(gb.update()){
     
    if (gb.buttons.pressed(BTN_C)){
      gb.titleScreen(F("Ghost detector"));
    }

    
    input = gb.backlight.ambientLight;
    inputVar = (prevInput - input)*10;
    prevInput = input;
    //gb.display.fillRect(0,40,constrain(abs(inputVar), 0, 84), 8);
    gb.display.drawBitmap(0,0,Screen);
    
    angleCible = max((angleCible*0.9), ((min(abs(inputVar), 240)/100) ));
    
      drawBitmapAngle(43,58,Aiguille,angle-1.2);

    
    if(angle > 0)
      gb.sound.playTick();
    
    angle =  ((angle<angleCible )? angle +(angleCible*0.2) : angle -(angleCible*0.2) ); 
    
   //maxValue = max(inputVar, maxValue);
      /*gb.display.println(angle);
      gb.display.println(angleCible);
      gb.display.println(inputVar);*/
  }
}

void drawBitmapAngle(int8_t x, int8_t y, const uint8_t *bitmap,float angle) {
   int8_t w = pgm_read_byte(bitmap);
   int8_t h = pgm_read_byte(bitmap + 1);
        int8_t centerX = w/2;
        int8_t centerY = h+5;
   bitmap = bitmap + 2; //add an offset to the pointer to start after the width and height
    int8_t i, j, byteWidth = (w + 7) / 8;
    for (j = 0; j < h; j++) {
        for (i = 0; i < w; i++) {
            if (pgm_read_byte(bitmap + j * byteWidth + i / 8) & (B10000000 >> (i % 8))) {
              
              int8_t desX =   (i - centerX) * cos(angle) - (j-centerY) * sin(angle);
              int8_t desY = (i-centerX) * sin(angle) + (j-centerY) * cos(angle);
              gb.display.drawPixel(x + desX, y + desY);
            }
        }
    }
}
